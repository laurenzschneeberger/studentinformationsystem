@page
@model StudentInformationSystem.Pages.HelpModel
@{
    ViewData["Title"] = "Help Center";
}

<style>
    /* Chat interface styling */
    .chat-container {
        background-color: rgba(240, 248, 255, 0.2);
        /* Very slight blue tint */
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        display: flex;
        flex-direction: column;
        height: 60vh;
        margin: 0 auto;
        overflow: hidden;
        width: 100%;
    }

    .chat-header {
        background: linear-gradient(135deg, #316CF4 0%, #1e54dd 100%);
        color: white;
        padding: 1.5rem;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
        display: flex;
        align-items: center;
    }

    .chat-header h2 {
        margin: 0;
        font-weight: 600;
        font-size: 1.5rem;
    }

    .chat-header-icon {
        font-size: 1.8rem;
        margin-right: 0.8rem;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .message {
        border-radius: 18px;
        max-width: 75%;
        padding: 0.8rem 1.2rem;
        position: relative;
        word-wrap: break-word;
        line-height: 1.5;
        animation: fadeIn 0.3s ease-in-out;
    }

    .user-message {
        align-self: flex-end;
        background-color: #316CF4;
        color: white;
        border-bottom-right-radius: 5px;
    }

    .bot-message {
        align-self: flex-start;
        background-color: #f0f2f5;
        color: #333;
        border-bottom-left-radius: 5px;
    }

    .bot-message pre {
        background-color: #2c3e50;
        border-radius: 8px;
        color: #ecf0f1;
        overflow-x: auto;
        padding: 1rem;
        margin: 0.5rem 0;
        font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
        font-size: 0.85rem;
    }

    .bot-message code {
        background-color: rgba(0, 0, 0, 0.07);
        border-radius: 4px;
        padding: 0.2rem 0.4rem;
        font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
    }

    .timestamp {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.7rem;
        margin-top: 4px;
        text-align: right;
    }

    .bot-timestamp {
        color: rgba(0, 0, 0, 0.5);
    }

    .chat-input {
        background-color: #f8f9fa;
        border-top: 1px solid #eaeaea;
        padding: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .chat-input input {
        flex: 1;
        border: 1px solid #dfe6e9;
        border-radius: 24px;
        padding: 0.8rem 1.2rem;
        transition: all 0.3s ease;
        font-size: 1rem;
    }

    .chat-input input:focus {
        border-color: #316CF4;
        box-shadow: 0 0 0 2px rgba(49, 108, 244, 0.2);
        outline: none;
    }

    .chat-input button {
        background-color: #316CF4;
        border: none;
        border-radius: 50%;
        color: white;
        cursor: pointer;
        height: 3rem;
        width: 3rem;
        transition: all 0.2s ease-in-out;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-input button:hover {
        background-color: #1e54dd;
        transform: scale(1.05);
    }

    .chat-input button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .typing-indicator {
        align-self: flex-start;
        background-color: #f0f2f5;
        border-radius: 18px;
        border-bottom-left-radius: 5px;
        color: #333;
        padding: 1rem;
        display: flex;
        align-items: center;
        gap: 0.3rem;
    }

    .typing-dot {
        animation: typingAnimation 1.4s infinite;
        background-color: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        display: inline-block;
        height: 7px;
        width: 7px;
    }

    .typing-dot:nth-child(2) {
        animation-delay: 0.2s;
    }

    .typing-dot:nth-child(3) {
        animation-delay: 0.4s;
    }

    /* Updated heading card styles to match Analytics.cshtml */
    .page-header {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4edf9 100%);
        border-radius: 15px;
        padding: 2.5rem 2rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    }

    .page-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.03'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    }

    .page-title {
        font-size: 2.5rem;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-weight: 700;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.05);
    }

    .page-subtitle {
        font-size: 1.2rem;
        color: #34495e;
        font-weight: 300;
        max-width: 600px;
    }

    .floating-shapes {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 0;
        overflow: hidden;
        pointer-events: none;
    }

    .shape {
        position: absolute;
        background: rgba(52, 152, 219, 0.1);
        border-radius: 50%;
    }

    .shape-1 {
        width: 60px;
        height: 60px;
        top: 20%;
        right: 10%;
        animation: float 8s ease-in-out infinite;
    }

    .shape-2 {
        width: 40px;
        height: 40px;
        bottom: 20%;
        right: 30%;
        animation: float 9s ease-in-out infinite 1s;
    }

    /* Animations */
    @@keyframes fadeIn
    {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes typingAnimation
        {
                0% {
                    transform: scale(1);
                    opacity: 0.7;
                }

                50% {
                    transform: scale(1.3);
                    opacity: 1;
                }

                100% {
                    transform: scale(1);
                    opacity: 0.7;
                }
            }

            @@keyframes float {
                    0% {
                        transform: translateY(0) rotate(0deg);
                    }

                    50% {
                        transform: translateY(-20px) rotate(10deg);
                    }

                    100% {
                        transform: translateY(0) rotate(0deg);
                    }
                }

                .suggestions {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 0.5rem;
                    margin-top: 1rem;
                }

                .suggestion-chip {
                    background-color: rgba(49, 108, 244, 0.1);
                    border: 1px solid rgba(49, 108, 244, 0.3);
                    border-radius: 16px;
                    color: #316CF4;
                    cursor: pointer;
                    font-size: 0.85rem;
                    padding: 0.5rem 1rem;
                    transition: all 0.2s ease;
                }

                .suggestion-chip:hover {
                    background-color: rgba(49, 108, 244, 0.2);
                    border-color: #316CF4;
                }
            </style>

            <div class="container">
                <!-- Page Header with analytics-style background -->
                <section class="page-header position-relative mb-5">
                    <div class="floating-shapes">
                        <div class="shape shape-1"></div>
                        <div class="shape shape-2"></div>
                    </div>
                    <div class="position-relative">
                        <h1 class="page-title">Help Center</h1>
                        <p class="page-subtitle">
                            Get instant assistance with any questions you might have about the Student
                            Information System. Our AI assistant is here to help.
                        </p>
                    </div>
                </section>

                <div class="row">
                    <div class="col-md-12">
                        <div class="chat-container">
                            <div class="chat-messages" id="chat-messages">
                                <!-- Messages will be inserted here -->
                                <div class="bot-message message">
                                    <p>👋 Hello! I'm the Student Information System assistant. How can I help you today?</p>
                                    <div class="suggestions">
                                        <div class="suggestion-chip" onclick="sendSuggestion('How do I add a new student?')">
                                            How do I add a new student?
                                        </div>
                                        <div class="suggestion-chip"
                                            onclick="sendSuggestion('What can the analytics page show me?')">
                                            What can the analytics page show me?
                                        </div>
                                        <div class="suggestion-chip"
                                            onclick="sendSuggestion('How do I update student information?')">
                                            How do I update student information?
                                        </div>
                                    </div>
                                    <div class="timestamp bot-timestamp">Just now</div>
                                </div>
                            </div>
                            <div class="chat-input">
                                <input type="text" id="user-input" placeholder="Type your question here..."
                                    aria-label="Type your message" autocomplete="off" />
                                <button id="send-button" title="Send message">
                                    <i class="bi bi-send"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @section Scripts {
                <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
                <script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.6/dist/purify.min.js"></script>
                <script>
                    document.addEventListener('DOMContentLoaded', function () {
                        const chatMessages = document.getElementById('chat-messages');
                        const userInput = document.getElementById('user-input');
                        const sendButton = document.getElementById('send-button');

                        let isWaitingForResponse = false;

                        // Function to add a message to the chat
                        function addMessage(content, isUser = false) {
                            const messageDiv = document.createElement('div');
                            messageDiv.classList.add('message');

                            if (isUser) {
                                messageDiv.classList.add('user-message');
                                messageDiv.innerHTML = `
                                                                                                                                                        <p>${content}</p>
                                                                                                                                                        <div class="timestamp">${formatTime()}</div>
                                                                                                                                                    `;
                            } else {
                                messageDiv.classList.add('bot-message');
                                // Parse markdown in bot messages using the marked library
                                const sanitizedHtml = DOMPurify.sanitize(marked.parse(content));
                                messageDiv.innerHTML = sanitizedHtml;

                                // Add timestamp after the parsed content
                                const timestamp = document.createElement('div');
                                timestamp.classList.add('timestamp', 'bot-timestamp');
                                timestamp.textContent = formatTime();
                                messageDiv.appendChild(timestamp);
                            }

                            chatMessages.appendChild(messageDiv);
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }

                        // Function to add typing indicator
                        function addTypingIndicator() {
                            const typingDiv = document.createElement('div');
                            typingDiv.classList.add('typing-indicator');
                            typingDiv.id = 'typing-indicator';
                            typingDiv.innerHTML = `
                                                                                                                                                    <span class="typing-dot"></span>
                                                                                                                                                    <span class="typing-dot"></span>
                                                                                                                                                    <span class="typing-dot"></span>
                                                                                                                                                `;
                            chatMessages.appendChild(typingDiv);
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }

                        // Function to remove typing indicator
                        function removeTypingIndicator() {
                            const typingIndicator = document.getElementById('typing-indicator');
                            if (typingIndicator) {
                                typingIndicator.remove();
                            }
                        }

                        // Function to format time (HH:MM)
                        function formatTime() {
                            const now = new Date();
                            const hours = now.getHours().toString().padStart(2, '0');
                            const minutes = now.getMinutes().toString().padStart(2, '0');
                            return `${hours}:${minutes}`;
                        }

                        // Function to send message to API
                        async function sendToAPI(message) {
                            try {
                                const response = await fetch('/api/chatbot', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ message }),
                                });

                                if (!response.ok) {
                                    throw new Error('API request failed');
                                }

                                const data = await response.json();
                                return data.response;
                            } catch (error) {
                                console.error('Error:', error);
                                return "I'm sorry, I encountered an error while processing your request. Please try again later.";
                            }
                        }

                        // Function to handle user messages
                        async function handleUserMessage() {
                            const message = userInput.value.trim();
                            if (!message || isWaitingForResponse) return;

                            // Clear input and disable button
                            userInput.value = '';
                            isWaitingForResponse = true;
                            sendButton.disabled = true;

                            // Add user message to chat
                            addMessage(message, true);

                            // Show typing indicator
                            addTypingIndicator();

                            // Get bot response
                            const botResponse = await sendToAPI(message);

                            // Remove typing indicator and add bot response
                            removeTypingIndicator();
                            addMessage(botResponse);

                            // Enable button
                            isWaitingForResponse = false;
                            sendButton.disabled = false;
                            userInput.focus();
                        }

                        // Event listeners
                        sendButton.addEventListener('click', handleUserMessage);

                        userInput.addEventListener('keypress', function (e) {
                            if (e.key === 'Enter') {
                                handleUserMessage();
                            }
                        });

                        // Initialize focus on the input
                        userInput.focus();

                        // Expose sendSuggestion for suggestion chips
                        window.sendSuggestion = function (suggestion) {
                            if (isWaitingForResponse) return;
                            userInput.value = suggestion;
                            handleUserMessage();
                        };
                    });
                </script>
            }